generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "postgresql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model AcademicJourney {
  id    String @id @default(cuid())
  title String
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Activity {
  id        String   @id @default(cuid())
  title     String
  userId    Int
  taskId    Int
  createdAt DateTime @default(now())
  journeyId String?
}

model BusinessJourney {
  id    String @id @default(cuid())
  title String
}

model CareerJourney {
  id    String @id @default(cuid())
  title String
}

model Experience {
  id    String @id
  title String
}

model Field {
  id    String @id @default(cuid())
  title String
}

model Goal {
  id        String   @id @default(cuid())
  title     String
  achieved  Boolean
  journeyId String?
  Journey   Journey? @relation(fields: [journeyId], references: [id])
}

model Interest {
  id        String   @id @default(cuid())
  journeyId String?
  Journey   Journey? @relation(fields: [journeyId], references: [id])
}

model Journey {
  id          String     @id @default(cuid())
  title       String?
  description String?
  userId      String
  bluePrintId String?
  journeyType String?
  fieldId     String?
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  interests   Interest[]
  goals       Goal[]
  tasks       Task[]
  active      Boolean    @default(false)
  completed   Boolean    @default(false)
  completedAt DateTime?
  createdAt   DateTime?  @default(now())
  updatedAt   DateTime?  @default(now())
  deletedAt   DateTime?  @default(now())
}

model JourneyBluePrint {
  id          String  @id @default(cuid())
  userId      String?
  type        String?
  templateId  String?
  title       String
  description String?
  field       String?
  expertise   String?
  price       String?
  creator     String?
  createdAt   String?
  updateAt    String?
  image       String?
}

model JourneyPrivacy {
  id        String @id @default(cuid())
  userId    String
  journeyId String
}

model MileStone {
  id        String  @id @default(cuid())
  journeyId String?
}

model PersonalJourney {
  id    String @id @default(cuid())
  title String
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model TaskLabel {
  id     String  @id @default(cuid())
  title  String
  color  String
  Task   Task?   @relation(fields: [taskId], references: [id])
  taskId String?
}

model Task {
  id          String      @id @default(cuid())
  title       String
  userId      String
  description String
  completed   Boolean     @default(false)
  journeyId   String?
  Journey     Journey?    @relation(fields: [journeyId], references: [id])
  progress    Int
  labels      TaskLabel[]
  active      Boolean     @default(false)
  completedAt DateTime?
  createdAt   DateTime?   @default(now())
  updatedAt   DateTime?   @default(now())
  deletedAt   DateTime?   @default(now())
  due         DateTime?
}

enum IdentityProvider {
  GOOGLE
  GITHUB
}

enum UserPermissionRole {
  USER
  ADMIN
}

model User {
  id                 String              @id @default(cuid())
  name               String?
  image              String?
  email              String              @unique
  createdAt          DateTime?           @default(now())
  bio                String?
  password           String?
  emailVerified      Boolean?            @default(false)
  login              String?
  Account            Account[]
  Session            Session[]
  identityProvider   IdentityProvider    @default(GITHUB)
  identityProviderId String?
  Journey            Journey[]
  ConnectionRequest  ConnectionRequest[]
}

enum ResourceType {
  Video
  Book
  Article
  Tutorial
  Tools
  Document
  Course
}

model Resource {
  id         String       @id @default(cuid())
  Backpack   Backpack?    @relation(fields: [backpackId], references: [id])
  backpackId String?
  title      String
  type       ResourceType
  createdAt  DateTime?    @default(now())
  updatedAt  DateTime?    @default(now())
  deletedAt  DateTime?    @default(now())
}

model Backpack {
  id          String     @id @default(cuid())
  description String?
  userId      String
  journeyId   String
  resources   Resource[]
  createdAt   DateTime?  @default(now())
  updatedAt   DateTime?  @default(now())
  deletedAt   DateTime?  @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Feeds {
  id     String @id @default(cuid())
  userId String
}

model FeedsActivities {
  id     String @id @default(cuid())
  userId String
}

enum ResflectionsType {
  Success
  Improvement
  Issue
}

model ReflectionActionItem {
  id           String           @id @default(cuid())
  type         ResflectionsType
  createdAt    DateTime?        @default(now())
  updatedAt    DateTime?        @default(now())
  deletedAt    DateTime?        @default(now())
  reflectionId String
  Reflection   Reflection?      @relation(fields: [reflectionId], references: [id])
}

model Reflection {
  id          String                 @id @default(cuid())
  userId      String
  type        ResflectionsType
  createdAt   DateTime?              @default(now())
  updatedAt   DateTime?              @default(now())
  deletedAt   DateTime?              @default(now())
  actionItems ReflectionActionItem[]
  description String
  thoughts    String
}

enum ConnectionStatus {
  Active
  Blocked
  Muted
}

model ConnectionInteraction {
  id         String       @id @default(cuid())
  createdAt  DateTime?    @default(now())
  updatedAt  DateTime?    @default(now())
  deletedAt  DateTime?    @default(now())
  weight     Int
  connectionId String
}

model Connection {
  id                      String                @id @default(cuid())
  createdAt               DateTime?             @default(now())
  updatedAt               DateTime?             @default(now())
  deletedAt               DateTime?             @default(now())
  status                  ConnectionStatus
  affinityScore           Int @default(0)
  user1 String
  user2 String
}

enum ConnectionRequestStatus {
  Accepted
  Declined
  Pending
}

model ConnectionRequest {
  id          String                  @id @default(cuid())
  createdAt   DateTime?               @default(now())
  updatedAt   DateTime?               @default(now())
  deletedAt   DateTime?               @default(now())
  acceptedAt  DateTime?
  requesterId String
  requesteeId String
  note        String?
  accepted    Boolean                 @default(false)
  status      ConnectionRequestStatus @default(Pending)
  requester   User                    @relation(fields: [requesterId], references: [id])
}

model UserConnections {
  id     String @id @default(cuid())
  userId String
}
